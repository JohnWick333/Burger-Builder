{"version":3,"sources":["webpack:///./src/components/UI/input/Input.js","webpack:///./src/Containers/Auth/Auth.js"],"names":["__webpack_exports__","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_extends","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","Auth","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","rules","isValid","trim","length","maxLength","_this","setState","prevState","event","controlName","updateControls","_objectSpread","state","_defineProperty","target","checkValidity","preventDefault","onAuth","Component","this","buildingBurger","authRedirectPath","onSetRedirectPatch","_this2","fromElementsArray","id","config","form","formElement","_components_UI_input_Input__WEBPACK_IMPORTED_MODULE_1__","inputChangedHandler","loading","_components_UI_Spinner__WEBPACK_IMPORTED_MODULE_7__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","to","onSubmit","onSubmitHandler","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_2__","btnType","clicked","switchAuthModeHandler","connect","authReducer","token","burgerReducer","building","dispatch","actions"],"mappings":"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","file":"2.bundle.js","sourcesContent":["import React from \"react\"\r\nimport \"../../../styles/componenets/Input.css\"\r\nexport default (props)=>{\r\n    let inputElement=null\r\n    const inputClasses=[\"InputElement\"];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\")\r\n    }\r\n    switch(props.elementType){\r\n        case(\"input\"):\r\n            inputElement=<input\r\n                 className={inputClasses.join(\" \")}\r\n                 {...props.elementConfig} \r\n                 value={props.value}\r\n                 onChange={props.changed}/>\r\n            break;\r\n        case(\"textarea\"):\r\n            inputElement=<textarea \r\n                className={inputClasses.join(\" \")}\r\n                {...props.elementConfig}  \r\n                value={props.value}\r\n                 onChange={props.changed}/>\r\n            break;\r\n        case(\"select\"):\r\n            inputElement=(<select\r\n                className={inputClasses.join(\" \")}\r\n                value={props.value} \r\n                onChange={props.changed}>\r\n                                            \r\n                {props.elementConfig.options.map(option=>(\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                 ))}\r\n                 \r\n                </select>)\r\n            break;\r\n        default:\r\n            inputElement=<input \r\n                className={inputClasses.join(\" \")}\r\n                {...props.elementConfig}  \r\n                value={props.value} \r\n                onChange={props.changed}/>\r\n    }\r\n\r\n    return(\r\n        <div className=\"Input\">\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\"\r\nimport Input from \"../../components/UI/input/Input\"\r\nimport Button from \"../../components/UI/Button/Button\"\r\nimport {connect} from \"react-redux\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport *as actions from \"../../store/Actions/index\"\r\nimport \"../../styles/componenets/Auth.css\"\r\nimport Spinner from \"../../components/UI/Spinner\"\r\n\r\n\r\nclass Auth extends Component{\r\n    state={\r\n        controls:{\r\n    \r\n                        email:{\r\n                            elementType:\"input\",\r\n                            elementConfig:{\r\n                                type:\"email\",\r\n                                placeholder:\" email\"\r\n                            },\r\n                            value:\"\",\r\n                            validation:{\r\n                                required:true,\r\n                                isEmail:true\r\n                            },\r\n                            valid:false,\r\n                            touched:false\r\n                        },\r\n\r\n                        password:{\r\n                            elementType:\"input\",\r\n                            elementConfig:{\r\n                                type:\"password\",\r\n                                placeholder:\"your password\"\r\n                            },\r\n                            value:\"\",\r\n                            validation:{\r\n                                required:true,\r\n                                minLength:6\r\n                            },\r\n                            valid:false,\r\n                            touched:false\r\n                        },\r\n                 },\r\n                 isSignUp:true\r\n      \r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== \"/\" ){\r\n            this.props.onSetRedirectPatch()\r\n        }\r\n    }\r\n    checkValidity=(value,rules)=>{\r\n        let isValid=true;\r\n        if(rules.required){\r\n            isValid=value.trim()!==\"\" && isValid;\r\n             }\r\n        if(rules.minLength){\r\n            isValid=value.length >= rules.minLength && isValid;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid=value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    switchAuthModeHandler=()=>{\r\n        this.setState(prevState=>{\r\n            return{\r\n                isSignUp:!prevState.isSignUp\r\n            }\r\n        })\r\n    }\r\n\r\n    inputChangedHandler=(event,controlName)=>{\r\n\r\n        const updateControls={\r\n            ...this.state.controls,\r\n            [controlName]:{\r\n                ...this.state.controls[controlName],\r\n                value:event.target.value,\r\n                valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            }\r\n        };\r\n        this.setState({controls:updateControls})\r\n    }\r\n\r\n    \r\n    onSubmitHandler=(event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp    )\r\n    }\r\n   \r\n    render(){\r\n        \r\n        const fromElementsArray=[];\r\n        for(let key in this.state.controls){\r\n            fromElementsArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form= fromElementsArray.map(formElement=>(\r\n            <Input\r\n            \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType} \r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            shouldValidate={formElement.config.validation}\r\n            changed={()=>this.inputChangedHandler(event,formElement.id)}\r\n            >\r\n               \r\n            </Input>)\r\n\r\n        )\r\n        \r\n        if (this.props.loading){\r\n            form=<Spinner/>\r\n        }\r\n        let errorMessage=null\r\n\r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect=null\r\n\r\n        if(this.props.isAuthenticated){\r\n            authRedirect=<Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n\r\n\r\n        return(\r\n            <div className=\"Auth\">\r\n            {authRedirect}\r\n            {errorMessage}\r\n                <form onSubmit={this.onSubmitHandler}>\r\n                      {form}\r\n                      <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                      clicked={this.switchAuthModeHandler}\r\n                      btnType=\"Danger\">SWITCH TO {this.state.isSignUp?\"SIGNIN\":\"SIGNUP\"}\r\n                </Button>\r\n            </div>\r\n         )\r\n    }\r\n    \r\n}\r\nconst mapPropsToState=state=>{\r\n    return{\r\n        loading:state.authReducer.loading,\r\n        error:state.authReducer.error,\r\n        isAuthenticated:state.authReducer.token !== null,\r\n        buildingBurger:state.burgerReducer.building,\r\n        authRedirectPath:state.authReducer.authRedirectPath\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n    return{\r\n        onAuth:(email,password,isSignUp)=>dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetRedirectPatch:()=>dispatch(actions.setAuthRedirectPath(\"/\"))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState,mapDispatchToProps)( Auth);"],"sourceRoot":""}